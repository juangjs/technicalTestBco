name: $(Build.SourceBranchName).$(date:yyyyMMdd)$(rev:.r)

variables:
  - name: 'Artifactory.Repository'
    value: 'build-devex-app'
  - name: 'Artifact.Name'
    value: 'devex-app'

resources:
  - repo: self
    clean: true

trigger:
  branches:
    include:
      - master
      - trunk
      - main
      - feature/*

stages:
- stage: CI
  jobs:
  - job: build
    displayName: 'Build'
    pool:
      name: Build
      demands:
        - java

    steps:
#    - task: SonarQubePrepare@5
#      displayName: 'Prepare analysis on SonarQube'
#      inputs:
#        SonarQube: SonarQube
#        scannerMode: CLI
#        extraProperties: |
#          sonar.projectKey=$(Build.Repository.Name)_$(projectName)
#          sonar.projectName=$(Build.Repository.Name)_$(projectName)

#          sonar.projectVersion=$(Build.BuildNumber)

    - task: Gradle@3
      displayName: 'Build and Test'
      inputs:
        workingDirectory: ms-devex-test/.
        gradleWrapperFile: ms-devex-test/gradlew
        tasks: 'clean build jacocoMergedReport'
#        publishJUnitResults: true
        testResultsFiles: '**/ms-devex-test/TEST-*.xml'
#        sonarQubeRunAnalysis: true
#        sqGradlePluginVersionChoice: 'build'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/ms-devex-test/build/reports/jacocoMergedReport/jacocoMergedReport.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/ms-devex-test/build/reports/jacocoMergedReport/html'

 #   - task: Sonar-buildbreaker@8
 #     displayName: 'Quality Gate'
 #     inputs:
 #       SonarQube: SonarQube
        
    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        containerRegistry: 'docker'
        repository: 'juangjllo/devexp-repository'
        command: 'buildAndPush'
        Dockerfile: '$(System.DefaultWorkingDirectory)/ms-devex-test/Dockerfile'
        tags: 'devex_app_$(Build.BuildId)'
      
    - script: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        trivy --version
      displayName: 'Install Trivy Scan'

    - script: |
        trivy image juangjllo/devexp-repository:devex_app_$(Build.BuildId)
      displayName: 'Trivy Scan Docker Image'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      condition: in(variables['Build.SourceBranch'], 'refs/heads/main', 'refs/heads/trunk', 'refs/heads/master')
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/applications/app-service/build/libs/'
        ArtifactName: '$(Artifact.Name)'
