name: $(Azure Pipelines.SourceBranchName).$(date:yyyyMMdd)$(rev:.r)

variables:
  - name: 'Artifactory.Repository'
    value: 'build-devex-app'
  - name: 'Artifact.Name'
    value: 'devex-app'

resources:
  - repo: self
    clean: true

trigger:
  branches:
    include:
      - master
      - trunk
      - main
      - feature/*

stages:
- stage: CI
  jobs:
  - job: build
    displayName: 'Build'
    pool:
      name: Azure Pipelines
      demands:
        - java
        - JAVA_HOME_17_X64
    steps:
    - task: SonarQubePrepare@5
      displayName: 'Prepare analysis on SonarQube'
      inputs:
        SonarQube: SonarQube
        scannerMode: CLI
        extraProperties: |
          sonar.projectKey=$(Build.Repository.Name)_$(projectName)
          sonar.projectName=$(Build.Repository.Name)_$(projectName)

          sonar.projectVersion=$(Build.BuildNumber)

    - task: Gradle@3
      displayName: 'Build and Test'
      inputs:
        workingDirectory: .
        gradleWrapperFile: gradlew
        tasks: 'clean build jacocoMergedReport'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        sonarQubeRunAnalysis: true
        sqGradlePluginVersionChoice: 'build'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/build/reports/jacocoMergedReport/jacocoMergedReport.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/build/reports/jacocoMergedReport/html'

    - task: Sonar-buildbreaker@8
      displayName: 'Quality Gate'
      inputs:
        SonarQube: SonarQube
        
    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        command: 'build'
        Dockerfile: '$(System.DefaultWorkingDirectory)/Dockerfile'
        tags: 'devex_app:$(Build.BuildId)'
    - script: |
        docker save -o dockerimage/image.tar devex_app:$(Build.BuildId)
      displayName: 'Save Docker image'
      

    - script: |
        wget https://github.com/aquasecurity/trivy/releases/download/v0.20.0/trivy_0.20.0_Linux-64bit.tar.gz
        tar zxvf trivy_0.20.0_Linux-64bit.tar.gz
        sudo mv trivy /usr/local/bin/trivy
      displayName: 'Install Trivy'
      
    - script: |
        trivy image --severity HIGH,CRITICAL dockerimage/image.tar
      displayName: 'Run Trivy Vulnerability Scan'
      
    - script: |
        trivy image --severity HIGH,CRITICAL your-image:tag | tee vulnerabilities.txt
      displayName: 'Run Trivy Vulnerability Scan'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'vulnerabilities.txt'
        artifactName: 'VulnerabilityReport'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      condition: in(variables['Azure Pipelines.SourceBranch'], 'refs/heads/main', 'refs/heads/trunk', 'refs/heads/master')
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/applications/app-service/build/libs/'
        ArtifactName: '$(Artifact.Name)'
